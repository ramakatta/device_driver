Command 'perf' not found, but can be installed with:

apt install linux-intel-iotg-5.15-tools-common  # version 5.15.0-1023.28~20.04.1, or
apt install linux-oem-5.6-tools-common          # version 5.6.0-1017.17
apt install linux-tools-common                  # version 5.4.0-137.154
apt install linux-iot-tools-common              # version 5.4.0-1011.13

 
# Listing all currently known events:
perf list

# Listing sched tracepoints:
perf list 'sched:*'

# CPU counter statistics for the specified command:
perf stat command

# Detailed CPU counter statistics (includes extras) for the specified command:
perf stat -d command

# CPU counter statistics for the specified PID, until Ctrl-C:
perf stat -p PID

# CPU counter statistics for the entire system, for 5 seconds:
perf stat -a sleep 5

# Various basic CPU statistics, system wide, for 10 seconds:
perf stat -e cycles,instructions,cache-references,cache-misses,bus-cycles -a sleep 10

# Various CPU level 1 data cache statistics for the specified command:
perf stat -e L1-dcache-loads,L1-dcache-load-misses,L1-dcache-stores command

# Various CPU data TLB statistics for the specified command:
perf stat -e dTLB-loads,dTLB-load-misses,dTLB-prefetch-misses command

# Various CPU last level cache statistics for the specified command:
perf stat -e LLC-loads,LLC-load-misses,LLC-stores,LLC-prefetches command

# Using raw PMC counters, eg, counting unhalted core cycles:
perf stat -e r003c -a sleep 5 

# PMCs: counting cycles and frontend stalls via raw specification:
perf stat -e cycles -e cpu/event=0x0e,umask=0x01,inv,cmask=0x01/ -a sleep 5

# Count syscalls per-second system-wide:
perf stat -e raw_syscalls:sys_enter -I 1000 -a

# Count system calls by type for the specified PID, until Ctrl-C:
perf stat -e 'syscalls:sys_enter_*' -p PID

# Count system calls by type for the entire system, for 5 seconds:
perf stat -e 'syscalls:sys_enter_*' -a sleep 5

# Count scheduler events for the specified PID, until Ctrl-C:
perf stat -e 'sched:*' -p PID

# Count scheduler events for the specified PID, for 10 seconds:
perf stat -e 'sched:*' -p PID sleep 10

# Count ext4 events for the entire system, for 10 seconds:
perf stat -e 'ext4:*' -a sleep 10

# Count block device I/O events for the entire system, for 10 seconds:
perf stat -e 'block:*' -a sleep 10

# Count all vmscan events, printing a report every second:
perf stat -e 'vmscan:*' -a -I 1000

# perf add userspace
perf probe -x /lib/x86_64-linux-gnu/libc-2.31.so --add malloc

perf record -e block:block_rq_issue -ag
l^C
# ls -l perf.data
 
# perf report

# Add a tracepoint for the kernel tcp_sendmsg() function entry ("--add" is optional):
perf probe --add tcp_sendmsg
perf probe --add vmstat_update
perf stat -e 'probe:vmstat_update' -a -I 1000

# Remove the tcp_sendmsg() tracepoint (or use "--del"):
perf probe -d tcp_sendmsg

#userspace function add to probe

gcc -g -o evenodd evenodd.c
perf probe  -x evenodd -a even
Added new event:
  probe_evenodd:even   (on even in /home/rama/Downloads/Corporate_trainings/HP_training/user_space/5-Debug/gdb_pc/evenodd)

You can now use it in all perf tools, such as:
 perf record -e probe_evenodd:even -ag

perf report perf.data
perf stat -e 'probe_evenodd:even' -a -I 1000

gcore -a pid
$ gcc -Wall -pg test_gprof.c test_gprof_new.c -o test_gprof
./test_gprof
gprof test_gprof gmon.out > analysis.txt

block device
https://prog.world/linux-kernel-5-0-we-write-simple-block-device-under-blk-mq/
https://github.com/CodeImp/sblkdev

https://olegkutkov.me/2020/02/10/linux-block-device-driver/
